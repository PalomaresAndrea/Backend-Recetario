name: CI/CD - Backend (Docker -> ACR -> Web App)

on:
  push:
    branches: [ main ]
  pull_request:

env:
  IMAGE_NAME: recetario-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Microsoft.Web provider (non-blocking)
        run: |
          STATE=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.Web state: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "Microsoft.Web no está registrado o no hay permisos para registrarlo desde el SP. Continuando…"
          fi

      - name: ACR Login (RBAC)
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build image
        run: |
          docker build --platform linux/amd64 \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            .

      - name: Push image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # ====== Docker Hub (opcional, solo si hay secrets) ======
      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push image to Docker Hub (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_REPO: ${{ secrets.DOCKERHUB_REPO }} # opcional; si no está, usaremos IMAGE_NAME
        run: |
          if [ -n "${DH_USER}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            if [ -z "${DH_REPO}" ]; then DH_REPO="${{ env.IMAGE_NAME }}"; fi
            SRC="${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            DST_SHA="${DH_USER}/${DH_REPO}:${GITHUB_SHA::7}"
            DST_LATEST="${DH_USER}/${DH_REPO}:latest"
            docker tag "$SRC" "$DST_SHA"
            docker tag "$SRC" "$DST_LATEST"
            docker push "$DST_SHA"
            docker push "$DST_LATEST"
          else
            echo "No Docker Hub secrets; skipping push."
          fi
      # ========================================================

      - name: Configure Web App container
        run: |
          az webapp config container set \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}

      - name: App settings
        run: |
          az webapp config appsettings set \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --settings \
            NODE_ENV=production \
            PORT=3000 \
            WEBSITES_PORT=3000 \
            MONGO_URI="${{ secrets.MONGO_URI }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            CORS_ORIGINS="${{ secrets.CORS_ORIGINS }}" \
            MAIL_USER="${{ secrets.MAIL_USER }}" \
            MAIL_PASS="${{ secrets.MAIL_PASS }}" \
            APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
            APPINSIGHTS_CONNECTIONSTRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
            BUILD_SHA=${{ github.sha }}

      - name: Restart Web App
        run: az webapp restart --name ${{ secrets.WEBAPP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }}

      - name: Healthcheck
        run: |
          HOST=$(az webapp show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.WEBAPP_NAME }} --query defaultHostName -o tsv)
          echo "Probing https://${HOST}/health"
          for i in {1..24}; do
            if curl -fsS --max-time 5 "https://${HOST}/health"; then
              echo "Health OK"
              exit 0
            fi
            echo "Retry $i/24..."
            sleep 5
          done
          echo "Healthcheck failed"
          exit 1
