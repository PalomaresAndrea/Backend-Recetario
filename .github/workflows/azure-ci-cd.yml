name: CI/CD - Backend (Docker -> ACR -> Web App)

on:
  push:
    branches: [ main ]
  pull_request:

env:
  IMAGE_NAME: recetario-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check Microsoft.Web provider (non-blocking)
        run: |
          STATE=$(az provider show -n Microsoft.Web --query registrationState -o tsv || echo "Unknown")
          echo "Microsoft.Web state: $STATE"
          if [ "$STATE" != "Registered" ]; then
            echo "Microsoft.Web no está registrado o no hay permisos para registrarlo desde el SP. Continuando…"
          fi

      - name: ACR Login (RBAC)
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build image
        run: |
          docker build --platform linux/amd64 \
            -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            .

      - name: Push image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      # ====== Docker Hub (opcional, solo si hay secrets) ======
      - name: Docker Hub login (skip si no hay secrets)
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          else
            echo "No DOCKERHUB_USERNAME/DOCKERHUB_TOKEN; skipping Docker Hub login."
          fi

      - name: Push image to Docker Hub (skip si no hay secrets)
        env:
          DH_USER: ${{ secrets.DOCKERHUB_USERNAME }}
          DH_REPO: ${{ secrets.DOCKERHUB_REPO }} # opcional; si no está, se usa IMAGE_NAME
        run: |
          if [ -n "${DH_USER}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            if [ -z "${DH_REPO}" ]; then DH_REPO="${{ env.IMAGE_NAME }}"; fi
            SRC="${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
            DST_SHA="${DH_USER}/${DH_REPO}:${GITHUB_SHA::7}"
            DST_LATEST="${DH_USER}/${DH_REPO}:latest"
            docker tag "$SRC" "$DST_SHA"
            docker tag "$SRC" "$DST_LATEST"
            docker push "$DST_SHA"
            docker push "$DST_LATEST"
          else
            echo "No Docker Hub secrets; skipping push."
          fi
      # ========================================================

      - name: Configure Web App container (with optional registry creds)
        run: |
          if [ -n "${{ secrets.ACR_USERNAME }}" ] && [ -n "${{ secrets.ACR_PASSWORD }}" ]; then
            echo "Setting container with explicit registry credentials…"
            az webapp config container set \
              --name ${{ secrets.WEBAPP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }} \
              --docker-registry-server-user ${{ secrets.ACR_USERNAME }} \
              --docker-registry-server-password ${{ secrets.ACR_PASSWORD }}
          else
            echo "Setting container without explicit registry credentials…"
            az webapp config container set \
              --name ${{ secrets.WEBAPP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}
          fi

      - name: App settings
        run: |
          az webapp config appsettings set \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --settings \
            NODE_ENV=production \
            PORT=3000 \
            WEBSITES_PORT=3000 \
            WEBSITES_CONTAINER_START_TIME_LIMIT=600 \
            MONGO_URI="${{ secrets.MONGO_URI }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            CORS_ORIGINS="${{ secrets.CORS_ORIGINS }}" \
            MAIL_USER="${{ secrets.MAIL_USER }}" \
            MAIL_PASS="${{ secrets.MAIL_PASS }}" \
            APPLICATIONINSIGHTS_CONNECTION_STRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
            APPINSIGHTS_CONNECTIONSTRING="${{ secrets.APPLICATIONINSIGHTS_CONNECTION_STRING }}" \
            BUILD_SHA=${{ github.sha }}

      - name: Enable Always On (best effort)
        run: |
          az webapp config set \
            --name ${{ secrets.WEBAPP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --always-on true || echo "Always On no soportado en este plan (ok)."

      - name: Restart Web App
        run: az webapp restart --name ${{ secrets.WEBAPP_NAME }} --resource-group ${{ secrets.RESOURCE_GROUP }}

      # ========= Healthcheck (soft) que NO falla el pipeline =========
      - name: Warm-up & Healthcheck (soft, no-fail)
        id: warmup
        continue-on-error: true
        env:
          HEALTHCHECK_MODE: ${{ secrets.HEALTHCHECK_MODE }} # valores: both|ready|health|off (default both)
        run: |
          set -e
          MODE="${HEALTHCHECK_MODE:-both}"
          HOST=$(az webapp show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.WEBAPP_NAME }} --query defaultHostName -o tsv)
          if [ -z "$HOST" ]; then
            echo "❌ No se pudo obtener el host del Web App"
            echo "status=NO_HOST" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ "$MODE" = "off" ]; then
            echo "ℹ️ HEALTHCHECK desactivado por HEALTHCHECK_MODE=off"
            echo "status=SKIPPED" >> $GITHUB_OUTPUT
            echo "host=https://${HOST}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Probing host: https://${HOST} (mode=${MODE})"
          OK=0
          for i in $(seq 1 60); do
            CODE_READY=000
            CODE_HEALTH=000
            if [ "$MODE" = "ready" ] || [ "$MODE" = "both" ]; then
              CODE_READY=$(curl -ks -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 15 "https://${HOST}/ready" || true)
            fi
            if [ "$MODE" = "health" ] || [ "$MODE" = "both" ]; then
              CODE_HEALTH=$(curl -ks -o /dev/null -w "%{http_code}" --connect-timeout 10 --max-time 15 "https://${HOST}/health" || true)
            fi

            # Éxito si /ready=204 o /health=200 (según modo)
            if [ "$CODE_READY" = "204" ] || [ "$CODE_HEALTH" = "200" ]; then
              OK=1
              echo "✅ UP (ready:${CODE_READY} health:${CODE_HEALTH}) en intento $i"
              break
            fi

            echo "⏳ Intento $i/60 (ready:${CODE_READY} health:${CODE_HEALTH})"
            sleep 10
          done

          if [ $OK -eq 1 ]; then
            echo "status=UP" >> $GITHUB_OUTPUT
          else
            echo "❌ Aún no responde OK tras 10 min. Dejando pipeline en verde (soft)."
            echo "status=SOFT_FAIL_503" >> $GITHUB_OUTPUT
            echo "Estado del WebApp:"
            az webapp show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.WEBAPP_NAME }} --query "{state: state, availability: properties.availabilityState, httpsOnly: httpsOnly}" -o table || true
            echo "Config de contenedor:"
            az webapp config container show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.WEBAPP_NAME }} -o table || true
          fi

          echo "host=https://${HOST}" >> $GITHUB_OUTPUT

      # ========= Resumen amigable (siempre corre) =========
      - name: Publicar resumen de deploy
        if: always()
        run: |
          STATUS="${{ steps.warmup.outputs.status }}"
          HOST="${{ steps.warmup.outputs.host }}"
          {
            echo "### ✅ Deploy realizado"
            echo ""
            echo "🔗 **URL:** ${HOST:-N/A}"
            echo "🩺 **Healthcheck (soft):** ${STATUS:-N/A}"
            echo ""
            if [ "${STATUS}" = "SOFT_FAIL_503" ]; then
              echo "> El sitio devolvió 503 durante el warm-up, pero el pipeline no se detuvo."
              echo "> Revisa logs del contenedor en **App Service → Log stream** y confirma el puerto/envs."
            fi
          } >> $GITHUB_STEP_SUMMARY

      - name: Mostrar URL HTTPS del Backend
        id: backend_url
        run: |
          echo "url=${{ steps.warmup.outputs.host }}" >> $GITHUB_OUTPUT
